Wrappertypen:

Es wird nach außen hin überall die Wrapperklasse blaze\lang\String verwendet.
Ansonsten werden bevorzugt native Typen verwendet, unter anderem auch string,
jedoch nur Klassenintern.
Alle Methoden nehmen sowohl blaze\lang\String als auch string als Parameter.

Arrays:

Sofern es nicht notwendig ist bzw. die Anzahl an Elementen innerhalb einer Menge
unveränderbar ist, wird ein array verwendet, ansonsten ein ArrayObject bzw.
eine Subklasse davon.

Enums:

Einträge werden über Konstanten realisiert. Außerdem werden Methoden bereit
gestellt um auf die Einträge zugreifen zu können. Überprüfung ob eine Klasse
eine Enum ist, geschieht über Reflection.


Reflection:

Reflection funktioniert nur für Klassen welche von blaze\lang\Object erben,
jedoch kann ein blaze\lang\reflect\Field einen nativen Datentyp definieren.


Caching:

Reflection hat einen internen Cache, trotzdem für Class::forName() versuchen
einen Cache zu machen. Alle Reflection Aktionen soweit wie möglich cachen
jedoch trotzdem Performancetests machen.

Annotations:

Implementierung von Annotations überdenken und derweil nicht weiter beachten.

Testing:

Bevor eine neue Klasse oder ein neues API geschrieben wird, müssen Tests
geschrieben werden, welche alle möglichen Nutzungsfälle des Systems abdecken.
Diese Vorgangsweise nennt man TDD (Test Driven Development) und hilft
besonders bei den Überlegungen zu einem System.