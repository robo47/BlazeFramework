Wrappertypes:

The public methods of a class can only return blaze\lang\String but no native string.
Only private or protected methods may return a native string.
Every public method of a class must accept a native string and a blaze\lang\String.
To convert every value to a blaze\lang\String use the method blaze\lang\String::asWrapper(). 
Every other type can be either a wrapper or a native but native is preferred because of performance.

Arrays:

There are 2 types of Arrays:
	Mutable: dynamic size
	Immutable: fix size


Enums:

Entries of an enum are realised with const-values.
An Enum should extend blaze\lang\Enum to get important static methods and must implement the method getClassName() which shall look like this:

public static function getClassName(){
	return __CLASS__;
}

Reflection needs the inheritance to determine wether a class is a Enum or not.
To get good intellisense write the Enum-class as return type or as parameter type in the docblock.
But in fact you only pass integers or whatever value you give your enum entry, so be careful.


Reflection:

Reflection is defined for classes which implements blaze\lang\Reflectable. The data type of a field in a class can be native too.
In some cases annotations are used to determine the data type.


Annotations:

Annotations are available via Reflection but concrete definitions of annotations are not implemented yet.

Testing:

Before a class is written there have to be made a test case for the proposed class with a proposed structure.
When the structure of the class was discussed and it is okay, then it can be implemented.

Files:

file_get_contents() is faster than normal file operations and should be used for the FileInputStream implementation

Caching:

Caching in files with serialization is often faster than the new creation of the objects.
Use Serialization for application/session scope but the session will be saved in the db for maximal scaleability.