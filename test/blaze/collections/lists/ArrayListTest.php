<?php

namespace blaze\collections\lists;

require_once 'D:/xampp/htdocs/BlazeFrameworkServer/src/blaze/lang/Reflectable.php';
require_once 'D:/xampp/htdocs/BlazeFrameworkServer/src/blaze/lang/Object.php';
require_once 'D:/xampp/htdocs/BlazeFrameworkServer/src/blaze/lang/ClassLoader.php';
spl_autoload_register('blaze\lang\ClassLoader::autoLoad');
require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__) . '/../../../../src/blaze/collections/lists/ArrayList.php';

/**
 * Test class for ArrayList.
 * Generated by PHPUnit on 2010-08-18 at 14:18:59.
 */
class ArrayListTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var ArrayList
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new ArrayList();
        $this->object = new ArrayList();
        for($i = 0;$i<10;$i++){
           $this->object->add($i);
        }
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @todo Implement testAdd().
     */
    public function testAdd() {
        // Remove the following lines when you implement this test.
                   $this->object->add(10);
           $this->assertTrue($this->object->get(10)==10);
    }

    /**
     * @todo Implement testAddAll().
     */
    public function testAddAll() {
        // Remove the following lines when you implement this test.
        $this->object->addAt(3, 11);
        $this->assertTrue($this->object->get(3)==11);
        $this->assertTrue($this->object->get(4)==3);
    }

    /**
     * @todo Implement testClear().
     */
    public function testClear() {
        // Remove the following lines when you implement this test.
        $this->object->clear();
        $this->assertTrue($this->object->count()==0);
    }

    /**
     * @todo Implement testIsEmpty().
     */
    public function testIsEmpty() {
        // Remove the following lines when you implement this test.
        $this->assertFalse($this->object->isEmpty());
        $this->object->clear();
        $this->assertTrue($this->object->isEmpty());
    }

    /**
     * @todo Implement testGetIterator().
     */
    public function testGetIterator() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testCount().
     */
    public function testCount() {
        // Remove the following lines when you implement this test.
        $this->assertTrue($this->object->count() == 10);
        $this->object->add(99);
        $this->assertTrue($this->object->count() == 11);
        $this->object->clear();
        $this->assertTrue($this->object->count() == 0);

    }

    /**
     * @todo Implement testContains().
     */
    public function testContains() {
        // Remove the following lines when you implement this test.
        $this->assertTrue($this->object->contains(5));
        $this->assertFalse($this->object->contains(9999));
    }

    /**
     * @todo Implement testContainsAll().
     */
    public function testContainsAll() {
        // Remove the following lines when you implement this test.
       $list = $this->object->subList(2, 4);
       $this->assertTrue($this->object->containsAll($list));
       $list->add(89);
       $this->assertFalse($this->object->containsAll($list));

    }

    /**
     * @todo Implement testRemove().
     */
    public function testRemove() {
        // Remove the following lines when you implement this test.

         $this->object->remove(4);
        $this->assertTrue($this->object->count() == 9);
        $this->assertTrue($this->object->indexOf(4)==-1);
    }

    /**
     * @todo Implement testRemoveAll().
     */
    public function testRemoveAll() {
        // Remove the following lines when you implement this test.
        $list = new ArrayList();
        $list->add(1);
        $list->add(2);
        
        $this->assertTrue($this->object->removeAll($list));
        $this->assertTrue($this->object->count()==8);
        
        $list = new ArrayList();
        $list->add(1);
        $list->add(7852);
        
        $this->assertFalse($this->object->removeAll($list));
        $this->assertTrue($this->object->count()==8);
 
    }

    /**
     * @todo Implement testRetainAll().
     */
    public function testRetainAll() {
        // Remove the following lines when you implement this test.
        $this->object->retainAll($list = $this->object->subList(2, 4));
    }

    /**
     * @todo Implement testToArray().
     */
    public function testToArray() {
        // Remove the following lines when you implement this test.
        $this->assertTrue(\is_array($this->object->toArray()));
    }

    /**
     * @todo Implement testAddAllAt().
     */
    public function testAddAllAt() {
        // Remove the following lines when you implement this test.
        $list = new ArrayList();
        $list->add(111);
        $list->add(222);
        $list->add(333);

        $this->object->addAllAt(4,$list);
    }

    /**
     * @todo Implement testAddAt().
     */
    public function testAddAt() {
        // Remove the following lines when you implement this test.
        $this->object->addAt(3, 11);
        $this->assertTrue($this->object->get(3)==11);
        $this->assertTrue($this->object->get(4)==3);
    }

    /**
     * @todo Implement testGet().
     */
    public function testGet() {
        // Remove the following lines when you implement this test.
         $this->assertTrue($this->object->get(0)==0);
        $this->assertTrue($this->object->get(5)==5);
        $this->assertTrue($this->object->get(8)==8);
    }

    /**
     * @todo Implement testIndexOf().
     */
    public function testIndexOf() {
        // Remove the following lines when you implement this test.
       $this->assertTrue($this->object->indexOf(3)==3);
        $this->assertTrue($this->object->indexOf(45)==-1);
    }

    /**
     * @todo Implement testLastIndexOf().
     */
    public function testLastIndexOf() {
        // Remove the following lines when you implement this test.
        $this->object->add(5);
        $this->object->add(5);
        $this->assertTrue($this->object->indexOf(5)==5);
        $this->assertTrue($this->object->lastIndexOf(5)==11);
    }

    /**
     * @todo Implement testListIterator().
     */
    public function testListIterator() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testRemoveAt().
     */
    public function testRemoveAt() {
        // Remove the following lines when you implement this test.
        $this->object->removeAt(5);
        $this->assertTrue($this->object->indexOf(5)!=5);
    }

    /**
     * @todo Implement testSerialize().
     */
    public function testSerialize() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSet().
     */
    public function testSet() {
        // Remove the following lines when you implement this test.
        $this->assertTrue($this->object->set(2, 69)==2);
        $this->assertTrue($this->object->get(2)==69);
        $this->assertTrue($this->object->indexOf(69)==2);
    }

    /**
     * @todo Implement testSubList().
     */
    public function testSubList() {
        // Remove the following lines when you implement this test.
        $list = $this->object->subList(2, 5);
        $this->assertTrue($list->get(0)==2);
        $this->assertTrue($list->get(1)==3);
        $this->assertTrue($list->get(2)==4);

        $list = $this->object->subList(2, 5,false);
        $this->assertTrue($list->get(0)==3);
        $this->assertTrue($list->get(1)==4);

        $list = $this->object->subList(2, 5,false,true);
        $this->assertTrue($list->get(0)==3);
        $this->assertTrue($list->get(1)==4);
        $this->assertTrue($list->get(2)==5);


    }

    /**
     * @todo Implement testUnserialize().
     */
    public function testUnserialize() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}

?>
