<?php

namespace blaze\collections\queue;

require_once 'D:/xampp/htdocs/BlazeFrameworkServer/src/blaze/lang/Reflectable.php';
require_once 'D:/xampp/htdocs/BlazeFrameworkServer/src/blaze/lang/Object.php';
require_once 'D:/xampp/htdocs/BlazeFrameworkServer/src/blaze/lang/ClassLoader.php';
spl_autoload_register('blaze\lang\ClassLoader::autoLoad');

/**
 * Test class for Stack.
 * Generated by PHPUnit on 2010-08-23 at 14:59:19.
 */
class StackTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Stack
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Stack();
        for($i = 0; $i<10;$i++){
            $this->object->push($i);
        }
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @todo Implement testAdd().
     */
    public function testAdd() {
        // Remove the following lines when you implement this test.
        $this->assertTrue($this->object->add(11));

    }

    /**
     * @todo Implement testAddAll().
     */
    public function testAddAll() {
        // Remove the following lines when you implement this test.
        $list = new \blaze\collections\lists\ArrayList();
        $list->add(555);
        $list->add(558);
        $list->add(559);

        $this->assertTrue($this->object->addAll($list));
        $this->assertTrue($this->object->count() ==13);
      

    }

    /**
     * @todo Implement testClear().
     */
    public function testClear() {
        // Remove the following lines when you implement this test.
       $this->object->clear();
       $this->assertTrue($this->object->isEmpty());
    }

    /**
     * @todo Implement testIsEmpty().
     */
    public function testIsEmpty() {
        // Remove the following lines when you implement this test.
        $this->assertFalse($this->object->isEmpty());
        $this->object->clear();
        $this->assertFalse(!$this->object->isEmpty());

    }

    /**
     * @todo Implement testGetIterator().
     */
    public function testGetIterator() {
        // Remove the following lines when you implement this test.
        $it = $this->object->getIterator();
        $this->assertTrue($it instanceof \Iterator);
        $i = 9;
        $test = false;
        foreach($this->object as $val){
            $this->assertTrue($val == $i);
            $i--;
            $test = true;
        }
        $this->assertTrue($test);
        $it->next();
        $this->assertTrue($it->current() === 8);
        $it->next();
        $it->next();
        $it->next();
        $it->remove();
        $this->assertTrue($this->object->search(5)==false);

    }

    /**
     * @todo Implement testCount().
     */
    public function testCount() {
        // Remove the following lines when you implement this test.
        $this->assertTrue($this->object->count()==10);
        $this->object->push(56);
        $this->assertTrue($this->object->count()==11);
        $this->object->remove(6);
        $this->assertTrue($this->object->count()==10);

    }

    /**
     * @todo Implement testContains().
     */
    public function testContains() {
        // Remove the following lines when you implement this test.
        $this->assertTrue($this->object->contains(4));
        $this->assertTrue($this->object->contains(1));
        $this->assertTrue($this->object->contains(8));
        $this->assertTrue(!$this->object->contains(855));
    }

    /**
     * @todo Implement testContainsAll().
     */
    public function testContainsAll() {
        // Remove the following lines when you implement this test.
         $list = new \blaze\collections\lists\ArrayList();
        $list->add(5);
        $list->add(6);
        $list->add(7);
        $this->assertTrue($this->object->containsAll($list));
        $list->add(8798);
        $this->assertTrue(!$this->object->containsAll($list));
    }

    /**
     * @todo Implement testRemove().
     */
    public function testRemove() {
        // Remove the following lines when you implement this test.
        $this->assertTrue($this->object->remove(2));
        $this->assertTrue($this->object->remove(4));
        $this->assertFalse($this->object->contains(2));

    }

    /**
     * @todo Implement testRemoveAll().
     */
    public function testRemoveAll() {
        // Remove the following lines when you implement this test.
        $list = new \blaze\collections\lists\ArrayList();
        $list->add(5);
        $list->add(6);
        $list->add(7);
        $this->assertTrue($this->object->removeAll($list));
        $this->assertFalse($this->object->contains(7));
        $this->assertFalse($this->object->contains(5));
        $this->assertFalse($this->object->contains(6));

        $list = new \blaze\collections\lists\ArrayList();
        $list->add(2);
        $list->add(89);
        $list->add(4);
        $this->assertTrue($this->object->removeAll($list));
        $this->assertFalse($this->object->contains(2));
        $this->assertFalse($this->object->contains(4));

        $list = new \blaze\collections\lists\ArrayList();
        $list->add(99);
        $list->add(89);
        $list->add(88);
        $this->assertFalse($this->object->removeAll($list));

    }

    /**
     * @todo Implement testRetainAll().
     */
    public function testRetainAll() {
        // Remove the following lines when you implement this test.
        $list = new \blaze\collections\lists\ArrayList();
        $list->add(5);
        $list->add(6);
        $list->add(7);

        $this->assertTrue(($this->object->retainAll($list)));
        
    }

    /**
     * @todo Implement testToArray().
     */
    public function testToArray() {
        // Remove the following lines when you implement this test.
        $this->assertTrue(\is_array($this->object->toArray()));

    }


    /**
     * @todo Implement testPeek().
     */
    public function testPeek() {
        // Remove the following lines when you implement this test.
        $this->assertTrue($this->object->peek()==9);
        $this->assertTrue($this->object->peek()==9);
        $this->object->clear();
        $this->assertTrue($this->object->peek()==null);
    }

    /**
     * @todo Implement testPoll().
     */
    public function testPoll() {
        // Remove the following lines when you implement this test.
         $this->assertTrue($this->object->poll()==9);
         $this->assertTrue($this->object->poll()==8);

        $this->object->clear();
        $this->assertTrue($this->object->poll()==null);
    }



    /**
     * @todo Implement testPop().
     */
    public function testPop() {
        // Remove the following lines when you implement this test.
         $this->assertTrue($this->object->pop()==9);
         $this->assertTrue($this->object->pop()==8);
         $this->assertTrue($this->object->pop()==7);
    }

    /**
     * @todo Implement testPush().
     */
    public function testPush() {
        // Remove the following lines when you implement this test.
        $this->object->push(99);
        $this->assertTrue($this->object->pop()==99);
        $this->assertTrue($this->object->pop()!=99);
    }

    /**
     * @todo Implement testSearch().
     */
    public function testSearch() {
        // Remove the following lines when you implement this test.
        $this->assertTrue($this->object->search(5)==6);
        $this->assertTrue(!$this->object->search(555));
    }

    public function testALL(){
        $this->assertTrue($this->object->count() == 10);
        $this->assertTrue($this->object->pop() == 9);
        $this->assertTrue($this->object->count() == 9);
        $this->object->push(1);
        $this->assertTrue($this->object->remove(1));
        $this->object->push(78);
        
    }

}

?>
