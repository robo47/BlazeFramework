<?php

namespace blaze\collections;
        use blaze\lang\Comparator;

require_once 'D:/xampp/htdocs/BlazeFrameworkServer/src/blaze/lang/Reflectable.php';
require_once 'D:/xampp/htdocs/BlazeFrameworkServer/src/blaze/lang/Object.php';
require_once 'D:/xampp/htdocs/BlazeFrameworkServer/src/blaze/lang/ClassLoader.php';
spl_autoload_register('blaze\lang\ClassLoader::autoLoad');
require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__) . '/../../../src/blaze/collections/Collections.php';

/**
 * Test class for Collections.
 * Generated by PHPUnit on 2010-08-24 at 15:25:41.
 */
class CollectionsTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Collections
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $ar = new lists\ArrayList();
        $ar->add(new \blaze\lang\Integer(5));
        $ar->add(new \blaze\lang\Integer(98));
        $ar->add(new \blaze\lang\Integer(1));
        $ar->add(new \blaze\lang\Integer(5));
        $ar->add(new \blaze\lang\Integer(68));
        $ar->add(new \blaze\lang\Integer(2));
        $ar->add(new \blaze\lang\Integer(5));
        $ar->add(new \blaze\lang\Integer(67));
        $this->object = $ar;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @todo Implement testAddAll().
     */
    public function testAddAll() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
       
    }

    /**
     * @todo Implement testBinarySearch().
     */
    public function testBinarySearch() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testBinaryRangeSearch().
     */
    public function testBinaryRangeSearch() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testCopyOf().
     */
    public function testCopyOf() {
        // Remove the following lines when you implement this test.
        $list = new lists\ArrayList();
        Collections::copyOf($this->object, $list);
        $this->assertTrue($this->object->get(0) == $list->get(0));
        $this->assertTrue($this->object->get(2) == $list->get(2));
        $this->assertTrue($this->object->get(5) == $list->get(5));
        $this->assertTrue($this->object->get(6) == $list->get(6));
        $this->assertTrue($this->object->get(7) == $list->get(7));
    }

    /**
     * @todo Implement testCopyOfRange().
     */
    public function testCopyOfRange() {
        // Remove the following lines when you implement this test.
        $dest = new lists\ArrayList();
        Collections::copyOfRange($this->object,2, 6, $dest);
        $this->assertTrue($this->object->get(2) == $dest->get(0));
        $this->assertTrue($this->object->get(3) == $dest->get(1));
        $this->assertTrue($this->object->get(4) == $dest->get(2));
        $this->assertTrue($this->object->get(5) == $dest->get(3));

    }

    /**
     * @todo Implement testFill().
     */
    public function testFill() {
        // Remove the following lines when you implement this test.
        Collections::fill($this->object, new \blaze\lang\Integer(99));
        $this->assertTrue($this->object->get(0) ==  new \blaze\lang\Integer(99));
        $this->assertTrue($this->object->get(2) ==  new \blaze\lang\Integer(99));
        $this->assertTrue($this->object->get(5) ==  new \blaze\lang\Integer(99));
        $this->assertTrue($this->object->get(6) ==  new \blaze\lang\Integer(99));
        $this->assertTrue($this->object->get(7) ==  new \blaze\lang\Integer(99));
    }

    /**
     * @todo Implement testFillRange().
     */
    public function testFillRange() {
        // Remove the following lines when you implement this test.
       Collections::fillRange($this->object, 2, 6, new \blaze\lang\Integer(99));

        $this->assertTrue($this->object->get(2) ==  new \blaze\lang\Integer(99));
        $this->assertTrue($this->object->get(3) ==  new \blaze\lang\Integer(99));
        $this->assertTrue($this->object->get(4) ==  new \blaze\lang\Integer(99));
        $this->assertTrue($this->object->get(5) ==  new \blaze\lang\Integer(99));
        $this->assertTrue($this->object->get(6) !=  new \blaze\lang\Integer(99));

    }

    /**
     * @todo Implement testIndexOfSubList().
     */
    public function testIndexOfSubList() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testLastIndexOfSubList().
     */
    public function testLastIndexOfSubList() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMax().
     */
    public function testMax() {
        // Remove the following lines when you implement this test.
  
        $this->assertTrue(Collections::max($this->object)==new \blaze\lang\Integer(98));

    }

    /**
     * @todo Implement testMin().
     */
    public function testMin() {
        // Remove the following lines when you implement this test.
        $this->assertTrue(Collections::min($this->object)==new \blaze\lang\Integer(1));
    }

    /**
     * @todo Implement testReplaceAll().
     */
    public function testReplaceAll() {
        // Remove the following lines when you implement this test.
        echo $this->object->indexOf(new \blaze\lang\Integer(5));
        Collections::replaceAll($this->object, new \blaze\lang\Integer(5), 'replaced');
        $this->assertTrue($this->object->get(0) ==  'replaced');
        $this->assertTrue($this->object->get(3) ==  'replaced');
        
       

    }

    /**
     * @todo Implement testReverse().
     */
    public function testReverse() {
        // Remove the following lines when you implement this test.
        Collections::reverse($this->object);
        $this->assertTrue($this->object->get(0) ==  new \blaze\lang\Integer(67));
        $this->assertTrue($this->object->get(7) ==  new \blaze\lang\Integer(5));
    }

    /**
     * @todo Implement testReverseComperator().
     */
    public function testReverseComperator() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSort().
     */
    public function testSort() {
        // Remove the following lines when you implement this test.
        $ar = new lists\ArrayList();
        $ar->add(new \blaze\lang\Integer(5));
        $ar->add(new \blaze\lang\Integer(98));
        $ar->add(new \blaze\lang\Integer(1));
        $ar->add(new \blaze\lang\Integer(5));
        $ar->add(new \blaze\lang\Integer(68));
        $ar->add(new \blaze\lang\Integer(2));
        $ar->add(new \blaze\lang\Integer(5));
        $ar->add(new \blaze\lang\Integer(67));
       /* var_dump($ar);
        Collections::sortRange($ar, 2, 7);
        var_dump($ar);*/

        Collections::sort($ar);

        $this->assertTrue(Collections::binarySearch($ar, new \blaze\lang\Integer(98), null)==7);

     
    }

    /**
     * @todo Implement testSortRange().
     */
    public function testSortRange() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSwap().
     */
    public function testSwap() {
        // Remove the following lines when you implement this test.
        Collections::swap($this->object, 0, 7);
        $this->assertTrue($this->object->get(0) ==  new \blaze\lang\Integer(67));
        $this->assertTrue($this->object->get(7) ==  new \blaze\lang\Integer(5));

    }

    /**
     * @todo Implement testDeepEquals().
     */
    public function testDeepEquals() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testBoundedCollection().
     */
    public function testBoundedCollection() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testBoundedSortedCollection().
     */
    public function testBoundedSortedCollection() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testBoundedBag().
     */
    public function testBoundedBag() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testBoundedSortedBag().
     */
    public function testBoundedSortedBag() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testBoundedSet().
     */
    public function testBoundedSet() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testBoundedSortedSet().
     */
    public function testBoundedSortedSet() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testBoundedList().
     */
    public function testBoundedList() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testBoundedMap().
     */
    public function testBoundedMap() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testBoundedSortedMap().
     */
    public function testBoundedSortedMap() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testBoundedBidiMap().
     */
    public function testBoundedBidiMap() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testBoundedSortedBidiMap().
     */
    public function testBoundedSortedBidiMap() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testImmutableCollection().
     */
    public function testImmutableCollection() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testImmutableSortedCollection().
     */
    public function testImmutableSortedCollection() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testImmutableBag().
     */
    public function testImmutableBag() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testImmutableSortedBag().
     */
    public function testImmutableSortedBag() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testImmutableSet().
     */
    public function testImmutableSet() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testImmutableSortedSet().
     */
    public function testImmutableSortedSet() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testImmutableList().
     */
    public function testImmutableList() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testImmutableMap().
     */
    public function testImmutableMap() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testImmutableSortedMap().
     */
    public function testImmutableSortedMap() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testImmutableBidiMap().
     */
    public function testImmutableBidiMap() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testImmutableSortedBidiMap().
     */
    public function testImmutableSortedBidiMap() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testTypedCollection().
     */
    public function testTypedCollection() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testTypedSortedCollection().
     */
    public function testTypedSortedCollection() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testTypedBag().
     */
    public function testTypedBag() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testTypedSortedBag().
     */
    public function testTypedSortedBag() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testTypedSet().
     */
    public function testTypedSet() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testTypedSortedSet().
     */
    public function testTypedSortedSet() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testTypedList().
     */
    public function testTypedList() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testTypedMap().
     */
    public function testTypedMap() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testTypedSortedMap().
     */
    public function testTypedSortedMap() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testTypedBidiMap().
     */
    public function testTypedBidiMap() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testTypedSortedBidiMap().
     */
    public function testTypedSortedBidiMap() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

   /* public function testPerformance(){
        $timer = new \blaze\util\Timer();
        $list = new lists\ArrayList();
        for($i=0;$i<50000;$i++){
            $list->add(new \blaze\lang\Integer($i));
        }
        $timer->start();
        $ar = $list->toArray();
        $ret = \array_search(new \blaze\lang\Integer(40000), $ar);
       $time = $timer->stop();
       echo $time.'   '.$ret.PHP_EOL;

       $timer->start();
       Collections::binarySearch($list, new \blaze\lang\Integer(4000));
       $time = $timer->stop();
       echo $time.'   '.$ret.PHP_EOL;


    }*/

}
/*class IntComperator implements Comparator{

public function compare(Object $o1, Object $o2) {
        if($o1 instanceof  Integer && $o2 instanceof  Integer){
            $ret =  $o2->toNative() - $o1->toNative();
            if($ret === 0){
                return 0;
            }
            if($ret>0){
                return 1;
            }
            if($ret<0){
                return -1;
            }
        }
    }
}*/

?>
