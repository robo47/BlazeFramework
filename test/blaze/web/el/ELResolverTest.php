<?php

namespace blaze\web\el;

require_once 'D:/xampp/htdocs/BlazeFrameworkServer/src/blaze/lang/Reflectable.php';
require_once 'D:/xampp/htdocs/BlazeFrameworkServer/src/blaze/lang/Object.php';
require_once 'D:/xampp/htdocs/BlazeFrameworkServer/src/blaze/lang/ClassLoader.php';
spl_autoload_register('blaze\lang\ClassLoader::autoLoad');
require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__) . '/../../../../src/blaze/web/el/ELResolver.php';

class Test extends \blaze\lang\Object {

    private $name;
    private $label;
    private $value;

    public function getName() {
        return $this->name;
    }

    public function setName($name) {
        $this->name = $name;
    }

    public function getLabel() {
        return $this->label;
    }

    public function setLabel($label) {
        $this->label = $label;
    }

    public function getValue() {
        return $this->value;
    }

    public function setValue($value) {
        $this->value = $value;
    }

}

class Meta extends \blaze\lang\Object {

    private $name;

    public function getName() {
        return $this->name;
    }

    public function setName($name) {
        $this->name = $name;
    }

}

/**
 * Test class for ELResolver.
 * Generated by PHPUnit on 2010-08-05 at 10:14:27.
 */
class ELResolverTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var ELResolver
     */
    protected $object;
    protected $mapper;
    protected $context;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->mapper = new \blaze\util\HashMap();

        $test1 = new Test();
        $test1->setLabel(true);
        $test1->setName(10);
        $test1->setValue('MyValue1');
        $this->mapper->set('test1', $test1);

        $test2 = new Test();
        $test2->setLabel('MyLabel2');
        $test2->setName('value');
        $test2->setValue($test1);
        $this->mapper->set('test2', $test2);

        $test3 = new Test();
        $test3->setLabel('label');
        $test3->setName($test1);
        $test3->setValue('name');
        $this->mapper->set('test3', $test3);

        $this->context = new ELContext($this->mapper);
        $this->object = new ELResolver($this->context);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    public function testGetValue() {
        // Resolving
        $this->assertEquals('label', $this->object->getValue(new Expression('{test3.label}')));
        $this->assertEquals('MyValue1', $this->object->getValue(new Expression('{test3.name.value}')));
        $this->assertEquals('MyLabel2', $this->object->getValue(new Expression('{test2.{test3.label}}')));
        $this->assertEquals('MyValue1', $this->object->getValue(new Expression('{test1.{test2.{test3.value}}}')));
        $this->assertEquals('ASD MyValue1 BLA', $this->object->getValue(new Expression('ASD {test1.{test2.{test3.value}}} BLA')));

        // Arithmetic
        $this->assertEquals(12, $this->object->getValue(new Expression('{test1.name + 2}')));
        $this->assertEquals(8, $this->object->getValue(new Expression('{test1.name - 2}')));
        $this->assertEquals(20, $this->object->getValue(new Expression('{test1.name * 2}')));
        $this->assertEquals(5, $this->object->getValue(new Expression('{test1.name / 2}')));
        $this->assertEquals(0, $this->object->getValue(new Expression('{test1.name % 2}')));
        $this->assertTrue($this->object->getValue(new Expression('{test1.name > 2}')));
        $this->assertTrue($this->object->getValue(new Expression('{test1.name < 20}')));
        $this->assertTrue($this->object->getValue(new Expression('{test1.name >= 10}')));
        $this->assertTrue($this->object->getValue(new Expression('{test1.name <= 11}')));

        //Logical
        $this->assertTrue($this->object->getValue(new Expression('{test1.value == "MyValue1"}')));
        $this->assertTrue($this->object->getValue(new Expression('{test1.value != "MyValue2"}')));
        $this->assertTrue($this->object->getValue(new Expression('{test1.value != "MyValue2"}')));
        $this->assertFalse($this->object->getValue(new Expression('{!test1.label}')));
        $this->assertFalse($this->object->getValue(new Expression('{!true}')));
        $this->assertFalse($this->object->getValue(new Expression('{empty(test1.value)}')));
    }

    public function testSetValue() {
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function testInvoke() {
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
?>
