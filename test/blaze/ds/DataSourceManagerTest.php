<?php

namespace blaze\ds;

use blaze\ds\meta\ColumnMetaData,
 blaze\ds\CallableStatement,
        \PDO;

require_once 'D:/xampp/htdocs/BlazeFrameworkServer/src/blaze/lang/Reflectable.php';
require_once 'D:/xampp/htdocs/BlazeFrameworkServer/src/blaze/lang/Object.php';
require_once 'D:/xampp/htdocs/BlazeFrameworkServer/src/blaze/lang/ClassLoader.php';
spl_autoload_register('blaze\lang\ClassLoader::autoLoad');


/**
 * Test class for the whole ds Package!
 * Generated by PHPUnit on 2010-08-09 at 19:15:34.
 */
class DataSourceManagerTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var DataSourceManager
     */
    protected $dsm = null;
    /**
     * @var bdsc
     */
    protected $bdsc = array();
    /**
     * @var DataSource
     */
    protected $ds = array();
    /**
     * @var Connection
     */
    protected $con = array();
    /**
     * @var Connection
     */
    protected $db = array();

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        //bdsc:<driver-name>://<Host>[:Port][/DB][?UID=User][&PWD=Password][&Option=Value]..

        $this->bdsc[0] = 'bdsc:pdomysql://localhost:3306/test?UID=root';
    }

    /**
     * This sets up connections to the data sources and creates databases
     * which are deleted at the end.
     */
    protected function setupConnection() {
        $this->dsm = DataSourceManager::getInstance();
        $this->assertNotNull($this->dsm);

        for ($i = 0; $i < (count($this->bdsc)); $i++) {
            $this->ds[$i] = $this->dsm->getDataSource($this->bdsc[$i]);
            $this->assertNotNull($this->ds[$i]);
        }

        for ($i = 0; $i < (count($this->bdsc)); $i++) {
            $this->con[$i] = $this->ds[$i]->getConnection();
            $this->assertNotNull($this->con[$i]);
        }

        for ($i = 0; $i < (count($this->bdsc)); $i++) {
            $this->db[$i] = $this->con[$i]->createDatabase('test_db');
            $this->assertNotNull($this->db[$i]);
            $this->assertEquals('test_db', $this->db[$i]->getDatabaseName());
        }
    }
    
    /**
     * This creates tables in the databases which can all be accessed the same way
     * and changed.
     */
    protected function setupTables(){
        for ($i = 0; $i < (count($this->bdsc)); $i++) {
            $schema = $this->db[$i]->createSchema('test_db');

            $tbl1 = $schema->createTable('test_table1');
            $tbl1->setTableComment('test_table2');
            $tbl1->setTableComment('This table is special');
            $tbl1->setTableCharset('latin1');
            $tbl1->setTableCollation('latin1_german1_ci');
            $col = $tbl1->createColumn('col_id', 'int');
            $col->setPrimaryKey(true, 'PK_COL_ID');
            $tbl1->addColumn($col);
            $schema->addTable($tbl1);
            
            
            $tbl2 = $schema->createTable('test_table2');
            $tbl2->setTableComment('This table is special too');
            $col = $tbl1->createColumn('col_id', 'blaze\\lang\\String', 10);
            $col->setPrimaryKey(true, 'PK_COL_ID');
            $tbl2->addColumn($col);
            $schema->addTable($tbl2);
        }
    }

    /**
     * Drops all test databases and closes all connections.
     */
    protected function closeConnection(){
        for ($i = 0; $i < (count($this->con)); $i++) {
            $this->assertFalse($this->con[$i]->isClosed());
            $this->con[$i]->dropDatabase('test_db');
            $this->con[$i]->close();
            $this->assertTrue($this->con[$i]->isClosed());
        }
    }



    //-------- Normal Statements ----------//

    /**
     * Inserts data with a normal statement with the executeUpdate() method.
     */
    protected function insertDataNormal(){
        for ($i = 0; $i < (count($this->con)); $i++) {
            $stmt = $this->db[$i]->getConnection()->createStatement();
            $this->assertNotNull($stmt);

            for($i = 0; $i < 26; $i++){
                $this->assertEquals(1, $stmt->executeUpdate('INSERT INTO test_table1 VALUES('.$i.')'));
                $this->assertEquals(1, $stmt->executeUpdate('INSERT INTO test_table2 VALUES(\''.(chr(ord('a') + $i)).'\')'));
            }
            for($i = 0; $i < 26; $i++){
                $this->assertEquals(1, $stmt->executeUpdate('INSERT INTO test_table1 VALUES('.($i + 26).')'));
                $this->assertEquals(1, $stmt->executeUpdate('INSERT INTO test_table2 VALUES(\''.('a'.chr(ord('a') + $i)).'\')'));
            }

            $stmt->close();
            $this->assertTrue($stmt->isClosed());
        }
    }

    /**
     * Updates data with a normal statement with the executeUpdate() method.
     */
    protected function updateDataNormal(){
        for ($i = 0; $i < (count($this->con)); $i++) {
            $stmt = $this->db[$i]->getConnection()->createStatement();
            $this->assertNotNull($stmt);

            $this->assertEquals(52, $stmt->executeUpdate('UPDATE test_table1 SET col_id = col_id + 52'));
            $this->assertEquals(52, $stmt->executeUpdate('UPDATE test_table2 SET col_id = CONCAT(\'Z\', col_id)'));

            $stmt->close();
            $this->assertTrue($stmt->isClosed());
        }
    }

    /**
     * Selects data with a normal statement with the executeQuery() method.
     */
    protected function selectDataNormal(){
        for ($i = 0; $i < (count($this->con)); $i++) {
            $stmt1 = $this->db[$i]->getConnection()->createStatement();
            $stmt2 = $this->db[$i]->getConnection()->createStatement();
            $this->assertNotNull($stmt1);
            $this->assertNotNull($stmt2);

            for($i = 0; $i < 26; $i++){
                $rs1 = $stmt1->executeQuery('SELECT * FROM test_table1 WHERE col_id = '.$i);
                $this->assertNotNull($rs1);
                $this->assertEquals($rs1, $stmt1->getResultSet());
                $rs2 = $stmt2->executeQuery('SELECT * FROM test_table2 WHERE col_id = \''.(chr(ord('a') + $i)).'\'');
                $this->assertNotNull($rs2);
                $this->assertEquals($rs2, $stmt2->getResultSet());

                $this->assertTrue($rs1->next());
                $this->assertTrue($rs2->next());
                $this->assertEquals($i, $rs1->getInt(0));
                $this->assertEquals(chr(ord('a') + $i), $rs2->getString(0)->toNative());

                $rs1->close();
                $rs2->close();
                $this->assertTrue($rs1->isClosed());
                $this->assertTrue($rs2->isClosed());
            }
            for($i = 0; $i < 26; $i++){
                $rs1 = $stmt1->executeQuery('SELECT * FROM test_table1 WHERE col_id = '.($i + 26));
                $this->assertEquals($rs1, $stmt1->getResultSet());
                $rs2 = $stmt2->executeQuery('SELECT * FROM test_table2 WHERE col_id = \''.('a'.chr(ord('a') + $i)).'\'');
                $this->assertEquals($rs2, $stmt2->getResultSet());

                $this->assertTrue($rs1->next());
                $this->assertTrue($rs2->next());
                $this->assertEquals($i + 26, $rs1->getInt(0));
                $this->assertEquals('a'.chr(ord('a') + $i), $rs2->getString(0)->toNative());

                $rs1->close();
                $rs2->close();
                $this->assertTrue($rs1->isClosed());
                $this->assertTrue($rs2->isClosed());
            }

            $stmt1->close();
            $stmt2->close();
            $this->assertTrue($stmt1->isClosed());
            $this->assertTrue($stmt2->isClosed());
        }
    }

    /**
     * Updates data with a normal statement with the executeUpdate() method.
     */
    protected function deleteDataNormal(){
        for ($i = 0; $i < (count($this->con)); $i++) {
            $stmt = $this->db[$i]->getConnection()->createStatement();
            $this->assertNotNull($stmt);

            $this->assertEquals(52, $stmt->executeUpdate('DELETE FROM test_table1'));
            $this->assertEquals(52, $stmt->executeUpdate('DELETE FROM test_table2'));

            $stmt->close();
            $this->assertTrue($stmt->isClosed());
        }
    }



    //-------- Batch Statements ----------//

    /**
     * Inserts data with a normal statement with the executeBatch() method.
     */
    protected function insertDataBatch(){
        for ($i = 0; $i < (count($this->con)); $i++) {
            $stmt = $this->db[$i]->getConnection()->createStatement();
            $this->assertNotNull($stmt);

            for($i = 0; $i < 26; $i++){
                $stmt->addBatch('INSERT INTO test_table1 VALUES('.$i.');');
                $stmt->addBatch('INSERT INTO test_table2 VALUES(\''.(chr(ord('a') + $i)).'\');');
            }
            for($i = 0; $i < 26; $i++){
                $stmt->addBatch('INSERT INTO test_table1 VALUES('.($i + 26).');');
                $stmt->addBatch('INSERT INTO test_table2 VALUES(\''.('a'.chr(ord('a') + $i)).'\');');
            }

            $results = $stmt->executeBatch();
            $this->assertTrue(is_array($results));

            foreach($results as $result){
                $this->assertEquals(1, $result);
            }

            $stmt->close();
            $this->assertTrue($stmt->isClosed());
        }
    }

    /**
     * Updates data with a normal statement with the executeUpdate() method.
     */
    protected function updateDataBatch(){
        for ($i = 0; $i < (count($this->con)); $i++) {
            $stmt = $this->db[$i]->getConnection()->createStatement();
            $this->assertNotNull($stmt);

            $stmt->addBatch('UPDATE test_table1 SET col_id = col_id + 52;');
            $stmt->addBatch('UPDATE test_table2 SET col_id = CONCAT(\'Z\', col_id);');
            $res = $stmt->executeBatch();
            $this->assertTrue(is_array($res));
            $this->assertEquals(52, $res[0]);
            $this->assertEquals(52, $res[1]);

            $stmt->close();
            $this->assertTrue($stmt->isClosed());
        }
    }

    /**
     * Updates data with a normal statement with the executeUpdate() method.
     */
    protected function deleteDataBatch(){
        for ($i = 0; $i < (count($this->con)); $i++) {
            $stmt = $this->db[$i]->getConnection()->createStatement();
            $this->assertNotNull($stmt);
            
            $stmt->addBatch('DELETE FROM test_table1;');
            $stmt->addBatch('DELETE FROM test_table2;');

            $res = $stmt->executeBatch();
            $this->assertTrue(is_array($res));
            $this->assertEquals(52, $res[0]);
            $this->assertEquals(52, $res[1]);

            $stmt->close();
            $this->assertTrue($stmt->isClosed());
        }
    }




    //-------- Prepared Statements Index ----------//

    /**
     * Inserts data with a prepared statement which uses a '?' for the parameters.
     */
    protected function insertDataPreparedIndex(){
        for ($i = 0; $i < (count($this->con)); $i++) {
            $stmt1 = $this->db[$i]->getConnection()->prepareStatement('INSERT INTO test_table1 VALUES(?)');
            $stmt2 = $this->db[$i]->getConnection()->prepareStatement('INSERT INTO test_table2 VALUES(?)');
            $this->assertNotNull($stmt1);
            $this->assertNotNull($stmt2);

            for($i = 0; $i < 26; $i++){
                $stmt1->setInt(0, $i);
                $stmt2->setString(0, chr(ord('a') + $i));

                $this->assertEquals(1, $stmt1->executeUpdate());
                $this->assertEquals(1, $stmt2->executeUpdate());
            }
            for($i = 0; $i < 26; $i++){
                $stmt1->setInt(0, $i + 26);
                $stmt2->setString(0, 'a'.chr(ord('a') + $i));

                $this->assertEquals(1, $stmt1->executeUpdate());
                $this->assertEquals(1, $stmt2->executeUpdate());
            }

            $stmt1->close();
            $stmt2->close();
            $this->assertTrue($stmt1->isClosed());
            $this->assertTrue($stmt2->isClosed());
        }
    }

    /**
     * Updates data with a prepared statement which uses a '?' for the parameters.
     */
    protected function updateDataPreparedIndex(){
        for ($i = 0; $i < (count($this->con)); $i++) {
            $stmt1 = $this->db[$i]->getConnection()->prepareStatement('UPDATE test_table1 SET col_id = col_id + ?');
            $stmt2 = $this->db[$i]->getConnection()->prepareStatement('UPDATE test_table2 SET col_id = CONCAT(?, col_id)');
            $this->assertNotNull($stmt1);
            $this->assertNotNull($stmt2);

            $stmt1->setInt(0, 52);
            $stmt2->setString(0, 'Z');

            $this->assertEquals(52, $stmt1->executeUpdate());
            $this->assertEquals(52, $stmt2->executeUpdate());

            $stmt1->close();
            $stmt2->close();
            $this->assertTrue($stmt1->isClosed());
            $this->assertTrue($stmt2->isClosed());
        }
    }

    /**
     * Selects data with a prepared statement with the executeQuery() method.
     */
    protected function selectDataPreparedIndex(){
        for ($i = 0; $i < (count($this->con)); $i++) {
            $stmt1 = $this->db[$i]->getConnection()->prepareStatement('SELECT * FROM test_table1 WHERE col_id = ?');
            $stmt2 = $this->db[$i]->getConnection()->prepareStatement('SELECT * FROM test_table2 WHERE col_id = ?');
            $this->assertNotNull($stmt1);
            $this->assertNotNull($stmt2);

            for($i = 0; $i < 26; $i++){
                $stmt1->setInt(0, $i);
                $stmt2->setString(0, chr(ord('a') + $i));
                $rs1 = $stmt1->executeQuery();
                $rs2 = $stmt2->executeQuery();

                $this->assertNotNull($rs1);
                $this->assertFalse($rs1->isClosed());
                $this->assertEquals($rs1, $stmt1->getResultSet());
                $this->assertNotNull($rs2);
                $this->assertFalse($rs2->isClosed());
                $this->assertEquals($rs2, $stmt2->getResultSet());

                $this->assertTrue($rs1->next());
                $this->assertTrue($rs2->next());
                $this->assertEquals($i, $rs1->getInt(0));
                $this->assertEquals(chr(ord('a') + $i), $rs2->getString(0)->toNative());

                $rs1->close();
                $rs2->close();
                $this->assertTrue($rs1->isClosed());
                $this->assertTrue($rs2->isClosed());
            }
            for($i = 0; $i < 26; $i++){
                $stmt1->setInt(0, $i + 26);
                $stmt2->setString(0, 'a'.chr(ord('a') + $i));
                $rs1 = $stmt1->executeQuery();
                $rs2 = $stmt2->executeQuery();

                $this->assertNotNull($rs1);
                $this->assertEquals($rs1, $stmt1->getResultSet());
                $this->assertNotNull($rs2);
                $this->assertEquals($rs2, $stmt2->getResultSet());

                $this->assertTrue($rs1->next());
                $this->assertTrue($rs2->next());
                $this->assertEquals($i + 26, $rs1->getInt(0));
                $this->assertEquals('a'.chr(ord('a') + $i), $rs2->getString(0)->toNative());

                $rs1->close();
                $rs2->close();
                $this->assertTrue($rs1->isClosed());
                $this->assertTrue($rs2->isClosed());
            }

            $stmt1->close();
            $stmt2->close();
            $this->assertTrue($stmt1->isClosed());
            $this->assertTrue($stmt2->isClosed());
        }
    }

    /**
     * Updates data with a prepared statement which uses a '?' for the parameters.
     */
    protected function deleteDataPreparedIndex(){
        for ($i = 0; $i < (count($this->con)); $i++) {
            $stmt1 = $this->db[$i]->getConnection()->prepareStatement('DELETE FROM test_table1 WHERE col_id = ?');
            $stmt2 = $this->db[$i]->getConnection()->prepareStatement('DELETE FROM test_table2 WHERE col_id = ?');
            $this->assertNotNull($stmt1);
            $this->assertNotNull($stmt2);


            for($i = 0; $i < 26; $i++){
                $stmt1->setInt(0, $i);
                $stmt2->setString(0, chr(ord('a') + $i));

                $this->assertEquals(1, $stmt1->executeUpdate());
                $this->assertEquals(1, $stmt2->executeUpdate());
            }
            for($i = 0; $i < 26; $i++){
                $stmt1->setInt(0, $i + 26);
                $stmt2->setString(0, 'a'.chr(ord('a') + $i));

                $this->assertEquals(1, $stmt1->executeUpdate());
                $this->assertEquals(1, $stmt2->executeUpdate());
            }

            $stmt1->close();
            $stmt2->close();
            $this->assertTrue($stmt1->isClosed());
            $this->assertTrue($stmt2->isClosed());
        }
    }


    //-------- Prepared Statements Named ----------//

    /**
     * Inserts data with a prepared statement which uses a ':id' for the parameters.
     */
    protected function insertDataPreparedNamed(){
        for ($i = 0; $i < (count($this->con)); $i++) {
            $stmt1 = $this->db[$i]->getConnection()->prepareStatement('INSERT INTO test_table1 VALUES(:id)');
            $stmt2 = $this->db[$i]->getConnection()->prepareStatement('INSERT INTO test_table2 VALUES(:id)');
            $this->assertNotNull($stmt1);
            $this->assertNotNull($stmt2);

            for($i = 0; $i < 26; $i++){
                $stmt1->setInt('id', $i);
                $stmt2->setString('id', chr(ord('a') + $i));

                $this->assertEquals(1, $stmt1->executeUpdate());
                $this->assertEquals(1, $stmt2->executeUpdate());
            }
            for($i = 0; $i < 26; $i++){
                $stmt1->setInt('id', $i + 26);
                $stmt2->setString('id', 'a'.chr(ord('a') + $i));

                $this->assertEquals(1, $stmt1->executeUpdate());
                $this->assertEquals(1, $stmt2->executeUpdate());
            }

            $stmt1->close();
            $stmt2->close();
            $this->assertTrue($stmt1->isClosed());
            $this->assertTrue($stmt2->isClosed());
        }
    }

    /**
     * Updates data with a prepared statement which uses a ':id' for the parameters.
     */
    protected function updateDataPreparedNamed(){
        for ($i = 0; $i < (count($this->con)); $i++) {
            $stmt1 = $this->db[$i]->getConnection()->prepareStatement('UPDATE test_table1 SET col_id = col_id + :id');
            $stmt2 = $this->db[$i]->getConnection()->prepareStatement('UPDATE test_table2 SET col_id = CONCAT(:id, col_id)');
            $this->assertNotNull($stmt1);
            $this->assertNotNull($stmt2);

            $stmt1->setInt('id', 52);
            $stmt2->setString('id', 'Z');

            $this->assertEquals(52, $stmt1->executeUpdate());
            $this->assertEquals(52, $stmt2->executeUpdate());

            $stmt1->close();
            $stmt2->close();
            $this->assertTrue($stmt1->isClosed());
            $this->assertTrue($stmt2->isClosed());
        }
    }

    /**
     * Selects data with a prepared statement with the executeQuery() method.
     */
    protected function selectDataPreparedNamed(){
        for ($i = 0; $i < (count($this->con)); $i++) {
            $stmt1 = $this->db[$i]->getConnection()->prepareStatement('SELECT * FROM test_table1 WHERE col_id = :id');
            $stmt2 = $this->db[$i]->getConnection()->prepareStatement('SELECT * FROM test_table2 WHERE col_id = :id');
            $this->assertNotNull($stmt1);
            $this->assertNotNull($stmt2);

            for($i = 0; $i < 26; $i++){
                $stmt1->setInt('id', $i);
                $stmt2->setString('id', chr(ord('a') + $i));
                $rs1 = $stmt1->executeQuery();
                $rs2 = $stmt2->executeQuery();

                $this->assertNotNull($rs1);
                $this->assertEquals($rs1, $stmt1->getResultSet());
                $this->assertNotNull($rs2);
                $this->assertEquals($rs2, $stmt2->getResultSet());

                $this->assertTrue($rs1->next());
                $this->assertTrue($rs2->next());
                $this->assertEquals($i, $rs1->getInt('col_id'));
                $this->assertEquals(chr(ord('a') + $i), $rs2->getString('col_id')->toNative());

                $rs1->close();
                $rs2->close();
                $this->assertTrue($rs1->isClosed());
                $this->assertTrue($rs2->isClosed());
            }
            for($i = 0; $i < 26; $i++){
                $stmt1->setInt('id', $i + 26);
                $stmt2->setString('id', 'a'.chr(ord('a') + $i));
                $rs1 = $stmt1->executeQuery();
                $rs2 = $stmt2->executeQuery();

                $this->assertNotNull($rs1);
                $this->assertEquals($rs1, $stmt1->getResultSet());
                $this->assertNotNull($rs2);
                $this->assertEquals($rs2, $stmt2->getResultSet());

                $this->assertTrue($rs1->next());
                $this->assertTrue($rs2->next());
                $this->assertEquals($i + 26, $rs1->getInt('col_id'));
                $this->assertEquals('a'.chr(ord('a') + $i), $rs2->getString('col_id')->toNative());

                $rs1->close();
                $rs2->close();
                $this->assertTrue($rs1->isClosed());
                $this->assertTrue($rs2->isClosed());
            }

            $stmt1->close();
            $stmt2->close();
            $this->assertTrue($stmt1->isClosed());
            $this->assertTrue($stmt2->isClosed());
        }
    }


    /**
     * Updates data with a prepared statement which uses a '?' for the parameters.
     */
    protected function deleteDataPreparedNamed(){
        for ($i = 0; $i < (count($this->con)); $i++) {
            $stmt1 = $this->db[$i]->getConnection()->prepareStatement('DELETE FROM test_table1 WHERE col_id = :id');
            $stmt2 = $this->db[$i]->getConnection()->prepareStatement('DELETE FROM test_table2 WHERE col_id = :id');
            $this->assertNotNull($stmt1);
            $this->assertNotNull($stmt2);


            for($i = 0; $i < 26; $i++){
                $stmt1->setInt('id', $i);
                $stmt2->setString('id', chr(ord('a') + $i));

                $this->assertEquals(1, $stmt1->executeUpdate());
                $this->assertEquals(1, $stmt2->executeUpdate());
            }
            for($i = 0; $i < 26; $i++){
                $stmt1->setInt('id', $i + 26);
                $stmt2->setString('id', 'a'.chr(ord('a') + $i));

                $this->assertEquals(1, $stmt1->executeUpdate());
                $this->assertEquals(1, $stmt2->executeUpdate());
            }

            $stmt1->close();
            $stmt2->close();
            $this->assertTrue($stmt1->isClosed());
            $this->assertTrue($stmt2->isClosed());
        }
    }

    /**
     * This tests the functionality of a simple statement with the precondition
     * that the test_table was created.
     */
    public function testNormalStatement() {
        $this->setupConnection();
        $this->setupTables();
        $this->insertDataNormal();
        $this->selectDataNormal();
        $this->deleteDataNormal();
        $this->insertDataNormal();
        $this->updateDataNormal();
        $this->closeConnection();
    }

    /**
     * This tests the functionality of a simple statement with the precondition
     * that the test_table was created.
     */
    public function testBatchStatement() {
        $this->setupConnection();
        $this->setupTables();
        $this->insertDataBatch();
        $this->selectDataNormal();
        $this->deleteDataBatch();
        $this->insertDataBatch();
        $this->updateDataBatch();
        $this->closeConnection();
    }

    /**
     * This tests the functionality of a simple statement with the precondition
     * that the test_table was created.
     */
    public function testPreparedStatementIndex() {
        $this->setupConnection();
        $this->setupTables();
        $this->insertDataPreparedIndex();
        $this->selectDataPreparedIndex();
        $this->deleteDataPreparedIndex();
        $this->insertDataPreparedIndex();
        $this->updateDataPreparedIndex();
        $this->closeConnection();
    }

    /**
     * This tests the functionality of a simple statement with the precondition
     * that the test_table was created.
     */
    public function testPreparedStatementNamed() {
        $this->setupConnection();
        $this->setupTables();
        $this->insertDataPreparedNamed();
        $this->selectDataPreparedNamed();
        $this->deleteDataPreparedNamed();
        $this->insertDataPreparedNamed();
        $this->updateDataPreparedNamed();
        $this->closeConnection();
    }

    /**
     * Begin Test DataSourceManager
     */
//    public function testCRUD() {
//        $this->setupConnection();
//
//        for ($i = 0; $i < (count($this->con)); $i++) {
//            $db = $this->con[$i]->createDatabase('phpunit_test', 'utf8');
//            $this->assertNotNull($db);
//
//            $this->assertEquals($db->getDatabaseName(), $this->con[$i]->createOrGetDatabase('phpunit_test')->getDatabaseName());
//            $this->assertNotEquals($db->getDatabaseCharset(), $this->con[$i]->createOrReplaceDatabase('phpunit_test', 'latin1')->getDatabaseCharset());
//            $db = $this->con[$i]->getDatabase('phpunit_test');
//
//            $schema = $db->createOrGetSchema('phpunit_test');
//            $tbl = $schema->createTable('phpunit_test_tbl');
//            $tbl->setTableName('p1');
//            $tbl->drop();
//            $tbl = $schema->createTable('phpunit_test_tbl');
//            $col = $tbl->createColumn('col1', 'varchar');
//
//            $this->con[$i]->dropDatabase('phpunit_test');
//        }
//    }
//
//    public function testRollbackPreparedStatement() {
//        $this->setupConnection();
//
//        for ($i = 0; $i < (count($this->con)); $i++) {
//            $this->assertFalse($this->con[$i]->isClosed());
//
//
//
//            $maxstm = $this->con[$i]->createStatement();
//            $rs = $maxstm->executeQuery('Select MAX(zahl) from test');
//            while ($rs->next()) {
//                $max = $rs->getInt(0);
//            }
//            $max++;
//
//            $this->con[$i]->setAutoCommit(false);
//
//            $this->con[$i]->beginTransaction();
//            $stm = $this->con[$i]->prepareStatement('INSERT INTO test (zahl ,zeichen ,datum ,geld) VALUES (?,?,?,?)');
//            $this->assertNotNull($stm);
//            $stm->setInt(0, $max);
//            $stm->setString(1, 'PreStmRollback' . $max);
//            $stm->setDate(2, new \blaze\util\Date(2010, 02, $max));
//            $stm->setDouble(3, 0.45);
//
//            $ret = $stm->executeUpdate();
//
//            $this->assertEquals(1, $ret);
//            $this->con[$i]->rollback();
//
//            $stm = $this->con[$i]->createStatement();
//            $rs = $stm->executeQuery('Select zahl from test where zahl = ' . $max);
//
//            $this->assertFalse($rs->next());
//        }
//    }
//
//    public function testMetaData() {
//        $this->setupConnection();
//
//        for ($i = 0; $i < (count($this->con)); $i++) {
//            $this->assertFalse($this->con[$i]->isClosed());
//
//            $meta = $this->con[$i]->getMetaData();
//
//            echo $this->con[$i]->getTransactionIsolation();
//            $this->con[$i]->setTransactionIsolation(\blaze\ds\driver\pdomysql\IsolationLevel::$READ_COMMITTED).\PHP_EOL;
//            echo $this->con[$i]->getTransactionIsolation();
//            $this->con[$i]->setTransactionIsolation(\blaze\ds\driver\pdomysql\IsolationLevel::$SERIALIZABLE).\PHP_EOL;
//            echo $this->con[$i]->getTransactionIsolation();
//            $this->con[$i]->setTransactionIsolation(\blaze\ds\driver\pdomysql\IsolationLevel::$READ_UNCOMMITTED).\PHP_EOL;
//            echo $this->con[$i]->getTransactionIsolation();
//            $this->con[$i]->setTransactionIsolation(\blaze\ds\driver\pdomysql\IsolationLevel::$REPEATABLE).\PHP_EOL;
//            echo $this->con[$i]->getTransactionIsolation();
//
//            $strar = split(':', $this->bdsc[$i]);
//            $strar[2] = \trim($strar[2], '//');
//            $strar[3] = split('/', $strar[3]);
//            $strar[3][1] = split('\?', $strar[3][1]);
//
//            $this->assertTrue($meta->getConnection() == $this->con[$i]);
//            $this->assertTrue($meta->getDatabaseName() == $strar[3][1][0]);
//            $this->assertTrue($meta->getHost() == $strar[2]);
//            $this->assertTrue($meta->getPort() == $strar[3][0]);
//
//            $schemas = $meta->getSchemas();
//            $this->assertTrue(\is_array($schemas)&& $schemas[0] instanceof meta\SchemaMetaData);
//            $schema = $meta->getSchema($strar[3][1][0]);
//            $this->assertTrue($schema instanceof meta\SchemaMetaData && $schema !=null);
//            $this->assertTrue($schema->getDatabaseMetaData()==$meta);
//
//            $this->schemaTest($schema);
//
//
//        }
//    }
//
//    public function schemaTest(meta\SchemaMetaData $schema){
//
//
//        $this->assertTrue(is_array($schema->getTables()));
//
//        $table = $schema->getTable('test');
//        $this->assertNotNull($table && $table instanceof \blaze\persistence\tool\TableMetadata);
//
//        $this->tableTest($table);
//    }
//
//    public function tableTest(meta\TableMetaData $table){
//        $this->assertTrue((is_array($table->getColumns())));
//
//        $this->assertTrue(\is_array(($table->getForeignKeys())));
//        $this->assertTrue(\is_array(($table->getPrimaryKeys())));
//        $this->assertTrue(\is_array($table->getUniqueKeys()));
//
//
//        $col = $table->getColumn('zahl');
//        $this->assertNotNull($col);
//
//
//
//
//    }
//
//
//    public function testResultSet() {
//        $this->setupConnection();
//
//        for ($i = 0; $i < (count($this->con)); $i++) {
//            $this->assertFalse($this->con[$i]->isClosed());
//            $stm = $this->con[$i]->prepareStatement('Select tblob, tbool, tdate, tdecimal, tdouble, tfloat, tstring, tint from testall');
//            $this->assertNotNull($stm);
//
//
//            $rs = $stm->executeQuery();
//
//            while ($rs->next()) {
//                $this->assertNotNull($rs->getBlob(0));
//                $this->assertNotNull($rs->getBoolean(1));
//                $this->assertNotNull($rs->getDate(2));
//                $this->assertNotNull($rs->getDecimal(3));
//                $this->assertNotNull($rs->getDouble(4));
//                $this->assertNotNull($rs->getFloat(5));
//                $this->assertNotNull($rs->getString(6));
//                $this->assertNotNull($rs->getInt(7));
//            }
//
//            $this->assertTrue($rs->relative(-1));
//            $this->assertFalse($rs->isClosed());
//            $rs->close();
//            $this->assertTrue($rs->isClosed());
//        }
//    }
//
//    public function testBatch(){
//         $this->setupConnection();
//
//        for ($i = 0; $i < (count($this->con)); $i++) {
//            $this->assertFalse($this->con[$i]->isClosed());
//
//
//
//            $stm = $this->con[$i]->createStatement();
//            $this->assertNotNull($stm);
//
//            $rs = $stm->executeQuery('Select MAX(zahl) from test');
//            while ($rs->next()) {
//                $max = $rs->getInt(0);
//            }
//            $max++;
//
//
//
//            $stm = $this->con[$i]->createStatement();
//            $ret = $stm->addBatch('INSERT INTO test (zahl, zeichen, datum, geld) VALUES (' . $max . ', \'Batch' . $max . '\', \'2010-08-28\', \'1.04\');');
//            $max++;
//            $ret = $stm->addBatch('INSERT INTO test (zahl, zeichen, datum, geld) VALUES (' . $max . ', \'Batch' . $max . '\', \'2010-08-28\', \'1.04\');');
//            $max++;
//            $ret = $stm->addBatch('INSERT INTO test (zahl, zeichen, datum, geld) VALUES (' . $max . ', \'Batch' . $max . '\', \'2010-08-28\', \'1.04\');');
//
//
//
//
//            $ret = $stm->executeBatch();
//
//
//            $stm = $this->con[$i]->createStatement();
//            $rs = $stm->executeQuery('Select zahl from test where zahl <= '.$max.' and zahl>='.($max-2));
//            $max = $max-2;
//            while ($rs->next()) {
//                $this->assertTrue($rs->getInt(0)==$max);
//                $max++;
//            }
//        }
//    }
//
//    public function testCallableStatement(){
//        $this->setupConnection();
//
//        for ($i = 0; $i < (count($this->con)); $i++) {
//           $stm = $this->con[$i]->prepareCall('CALL counttest(@ret)');
//           $stm->execute();
//           $ret = $stm->getInt('ret');
//
//
//           $this->assertNotNull($ret);
//
//           $stm = $this->con[$i]->prepareCall('CALL getdatebyzahl(?,@ret)');
//           $stm->setInt(0,new \blaze\lang\Integer(1));
//           $stm->execute();
//           $ret = $stm->getDate('ret');
//           $this->assertNotNull($ret);
//
//           $stm = $this->con[$i]->prepareCall('SELECT functiontest(?) into @a');
//           $stm->setInt(0,new \blaze\lang\Integer(1));
//           $stm->execute();
//           $ret = $stm->getInt('a');
//
//
//        }
//
//    }
//
//    public function testView(){
//         $this->setupConnection();
//
//        for ($i = 0; $i < (count($this->con)); $i++) {
//            $this->assertFalse($this->con[$i]->isClosed());
//            $stm = $this->con[$i]->prepareStatement('Select zahl,datum from v1');
//            $this->assertNotNull($stm);
//
//
//            $rs = $stm->executeQuery();
//
//            while ($rs->next()) {
//                $rs->getDate(1);
//                $this->assertNotNull($rs->getInt(0));
//            }
//        }
//
//    }

}
?>
