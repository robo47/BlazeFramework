<?php

namespace blaze\ds;

require_once 'D:/xampp/htdocs/BlazeFrameworkServer/src/blaze/lang/Reflectable.php';
require_once 'D:/xampp/htdocs/BlazeFrameworkServer/src/blaze/lang/Object.php';
require_once 'D:/xampp/htdocs/BlazeFrameworkServer/src/blaze/lang/ClassLoader.php';
spl_autoload_register('blaze\lang\ClassLoader::autoLoad');
require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__) . '/../../../src/blaze/ds/DataSourceManager.php';

/**
 * Test class for the whole ds Package!
 * Generated by PHPUnit on 2010-08-09 at 19:15:34.
 */
class DataSourceManagerTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var DataSourceManager
     */
    protected $dsm = null;
    /**
     * @var bdsc
     */
    protected $bdsc = array();
    /**
     * @var DataSource
     */
    protected $ds = array();
    /**
     * @var Connection
     */
    protected $con = array();
    /**
     * @var Strin/SQL
     */
    protected $sqlstmt = array();


    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        //bdsc:<driver-name>://<Host>[:Port][/DB][?UID=User][&PWD=Password][&Option=Value]..

        $this->bdsc[0] = 'bdsc:pdomysql://localhost:3306/test?UID=root';
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        for ($i = 0; $i < (count($this->con)); $i++) {
            $this->assertFalse($this->con[$i]->isClosed());
            $this->con[$i]->close();
            $this->assertTrue($this->con[$i]->isClosed());
        }
    }

    protected function setupConnection() {

        $this->dsm = DataSourceManager::getInstance();
        $this->assertNotNull($this->dsm);

     
        for ($i = 0; $i < (count($this->bdsc)); $i++) {
            $this->ds[$i] = $this->dsm->getDataSource($this->bdsc[$i]);
            $this->assertNotNull($this->ds[$i]);
        }

        for ($i = 0; $i < (count($this->bdsc)); $i++) {
            $this->con[$i] = $this->ds[$i]->getConnection();
            $this->assertNotNull($this->con[$i]);
        }
    }

    /**
     * Begin Test DataSourceManager
     */
    public function testSelectStatement() {
        // Remove the following lines when you implement this test.
        $this->setupConnection();

        for ($i = 0; $i < (count($this->con)); $i++) {
            $this->assertFalse($this->con[$i]->isClosed());
            $stm = $this->con[$i]->createStatement();
            $this->assertNotNull($stm);

            $rs = $stm->executeQuery('Select datum,zahl,zeichen,geld  from test');

            while ($rs->next()) {
                $rs->getDate(0);
                $rs->getInt(1);
                $rs->getString(2);
                $rs->getDouble(3);
            }

        }
    }

    public function testInsertStatement() {
        $this->setupConnection();

        for ($i = 0; $i < (count($this->con)); $i++) {
            $this->assertFalse($this->con[$i]->isClosed());

            $this->con[$i]->beginTransaction();

            $stm = $this->con[$i]->createStatement();
            $this->assertNotNull($stm);

            $rs = $stm->executeQuery('Select MAX(zahl) from test');
            while ($rs->next()) {
                $max = $rs->getInt(0);
            }
            $max++;


            
            $stm = $this->con[$i]->createStatement();
            $ret = $stm->executeUpdate("INSERT INTO `test`.`test` (`zahl`, `zeichen`, `datum`, `geld`) VALUES ('.$max.', 'Stmt', '2010-08-28', '1.04')");

            $this->con[$i]->commit();

            $this->assertEquals(1, $ret);

        }
    }

    public function testSelectPreparedStatement() {
        $this->setupConnection();

        for ($i = 0; $i < (count($this->con)); $i++) {
            $this->assertFalse($this->con[$i]->isClosed());
            $stm = $this->con[$i]->prepareStatement('Select datum,zahl,zeichen,geld  from test');
            $this->assertNotNull($stm);


            $rs = $stm->executeQuery();

            while ($rs->next()) {
                $rs->getDate(0);
                $rs->getInt(1);
                $rs->getString(2);
                $rs->getDouble(3);
            }
        }
    }

    public function testInsertPreparedStatement() {
        $this->setupConnection();

        for ($i = 0; $i < (count($this->con)); $i++) {
            $this->assertFalse($this->con[$i]->isClosed());
           
            $this->con[$i]->beginTransaction();

            $stm = $this->con[$i]->prepareStatement('INSERT INTO test (zahl ,zeichen ,datum ,geld) VALUES (?,?,?,?)');
            $this->assertNotNull($stm);

            $maxstm = $this->con[$i]->createStatement();
            $rs = $maxstm->executeQuery('Select MAX(zahl) from test');
            while ($rs->next()) {
                $max = $rs->getInt(0);
            }
            $max++;

            $stm->setInt(0, $max);
            $stm->setString(1, 'PreStmTest' . $max);
            $stm->setDate(2, new \blaze\util\Date(2010, 02, $max));
            $stm->setDouble(3, 0.45);

            $ret = $stm->executeUpdate();

            $this->con[$i]->commit();

            $this->assertEquals(1, $ret);
        }
    }

    public function testRollbackPreparedStatement() {
        $this->setupConnection();

        for ($i = 0; $i < (count($this->con)); $i++) {
            $this->assertFalse($this->con[$i]->isClosed());
            
            

            $maxstm = $this->con[$i]->createStatement();
            $rs = $maxstm->executeQuery('Select MAX(zahl) from test');
            while ($rs->next()) {
                $max = $rs->getInt(0);
            }
            $max++;

             $this->con[$i]->setAutoCommit(false);
            $this->con[$i]->beginTransaction();
            $stm = $this->con[$i]->prepareStatement('INSERT INTO test (zahl ,zeichen ,datum ,geld) VALUES (?,?,?,?)');
            $this->assertNotNull($stm);
            $stm->setInt(0, $max);
            $stm->setString(1, 'PreStmRollback' . $max);
            $stm->setDate(2, new \blaze\util\Date(2010, 02, $max));
            $stm->setDouble(3, 0.45);
            
            $ret = $stm->executeUpdate();

            $this->assertEquals(1, $ret);
            $this->con[$i]->rollback();
        }
    }

    public function testMetaData(){
        $this->setupConnection();

        for ($i = 0; $i < (count($this->con)); $i++) {
            $this->assertFalse($this->con[$i]->isClosed());

            $meta = $this->con[$i]->getMetaData();
             $strar = split(':', $this->bdsc[$i]);
             $strar[2]= \trim($strar[2], '//');
             $strar[3]= split('/',$strar[3]);
             $strar[3][1]= split('\?',$strar[3][1]);
             \var_dump($strar);
            $this->assertTrue ($meta->getConnection()==$this->con[$i]);
             $this->assertTrue ($meta->getDatabaseName()==$strar[3][1][0]);

            $this->assertTrue ($meta->getHost()==$strar[2]);
            $this->assertTrue ($meta->getPort()==$strar[3][0]);
        }

    }



}

?>
